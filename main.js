!function(){"use strict";class e{constructor(e){let{data:t,templateSelector:r,handleImageClick:s,isUserCard:i,handleDeleteBinClick:n,isLiked:o,handleAddCardLike:a,handleRemoveCardLike:l}=e;var d,c,h;d=this,h=()=>{this._isLiked?this._handleRemoveCardLike(this):this._handleAddCardLike(this)},(c=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var s=r.call(e,"string");if("object"!=typeof s)return s;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==typeof t?t:String(t)}(c="_handleLikeClick"))in d?Object.defineProperty(d,c,{value:h,enumerable:!0,configurable:!0,writable:!0}):d[c]=h,this._title=t.name,this._link=t.link,this._templateSelector=r,this._handleImageClick=s,this._likes=t.likes,this._id=t._id,this._handleDeleteBinClick=n,this._isLiked=o,this._ownerId=t.owner._id,this._isUserCard=i,this._handleAddCardLike=a,this._handleRemoveCardLike=l}getCardId(){return this._id}_setCardLikes(){this._cardLikeCount.textContent=this._likes.length,this._isLiked&&this._likeButton.classList.add("card__like-button-clicked")}_setDeleteButton(){this._deleteButton=this._element.querySelector(".card__delete-button"),this._isUserCard?this._deleteButton.addEventListener("click",(()=>{this._handleDeleteBinClick(this._id,this._element)})):this._deleteButton.remove()}_getCardTemplate(){return document.querySelector(this._templateSelector).content.querySelector(".card").cloneNode(!0)}addLike(e){this._likeButton.classList.add("card__like-button-clicked"),this._cardLikeCount.textContent=e.likes.length,this._isLiked=!this._isLiked}removeLike(e){this._likeButton.classList.remove("card__like-button-clicked"),this._cardLikeCount.textContent=e.likes.length,this._isLiked=!this._isLiked}_setEventListeners(){const e=this._element.querySelector(".card__image");this._likeButton.addEventListener("click",(()=>{this._handleLikeClick(this)})),e.addEventListener("click",(()=>{this._handleImageClick({title:this._title,link:this._link})}))}generateCard(){this._element=this._getCardTemplate();const e=this._element.querySelector(".card__title"),t=this._element.querySelector(".card__image");return this._cardLikeCount=this._element.querySelector(".card__like-count"),this._likeButton=this._element.querySelector(".card__like-button"),t.alt=this._title,e.textContent=this._title,t.src=this._link,this._setEventListeners(),this._setDeleteButton(),this._setCardLikes(),this._element}}class t{constructor(e,t){this._formSelector=e.formSelector,this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._formElement=t,this._inputList=[...this._formElement.querySelectorAll(this._inputSelector)],this._buttonElement=this._formElement.querySelector(this._submitButtonSelector)}_showErrorInput(e,t){const r=this._formElement.querySelector(`.${e.id}-error`);e.classList.add(this._inputErrorClass),r.textContent=t,r.classList.add(this._errorClass)}_hideErrorInput(e){const t=this._formElement.querySelector(`.${e.id}-error`);e.classList.remove(this._inputErrorClass),t.classList.remove(this._errorClass),t.textContent=""}_toggleInputError(e){e.validity.valid?this._hideErrorInput(e):this._showErrorInput(e,e.validationMessage)}_hasInvalidInput(e){return e.some((e=>!e.validity.valid))}_toggleButtonState(){this._hasInvalidInput(this._inputList)?(this._buttonElement.disabled=!0,this._buttonElement.classList.add(this._inactiveButtonClass)):(this._buttonElement.disabled=!1,this._buttonElement.classList.remove(this._inactiveButtonClass))}_setEventListeners(){this._toggleButtonState(),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._toggleInputError(e),this._toggleButtonState()}))}))}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}resetButtonState(){this._toggleButtonState()}checkInputErrors(){this._inputList.forEach((e=>{this._toggleInputError(e)}))}}const r={formSelector:".modal__form",inputSelector:".form__input",submitButtonSelector:".form__button",inactiveButtonClass:"form__button_disabled",inputErrorClass:"form__input_type_error",errorClass:"form__error_visible"},s=document.querySelector(".profile__add-button"),i=document.querySelector(".profile__edit-button"),n=document.querySelector(".profile__image-edit-button"),o={};function a(e,t,r){return(t=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var s=r.call(e,"string");if("object"!=typeof s)return s;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==typeof t?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}class l{constructor(e){a(this,"_handleEscClose",(e=>{"Escape"===e.key&&this.close()})),a(this,"_handleOutsideClick",(e=>{e.target.classList.contains("modal")&&this.close()})),this._popup=document.querySelector(e)}open(){this._popup.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popup.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}setEventListeners(){this._closeButton=this._popup.querySelector(".modal__close-button"),this._closeButton.addEventListener("click",(()=>{this.close()})),this._popup.addEventListener("mousedown",this._handleOutsideClick)}}class d extends l{constructor(e,t){super(e),this._handleFormSubmit=t,this._popupForm=this._popup.querySelector(".modal__form"),this._submitButton=this._popup.querySelector(".form__button"),this._submitButtonText=this._submitButton.textContent,this._inputList=this._popup.querySelectorAll(".form__input"),this._inputValues={}}renderLoading(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...";this._submitButton.textContent=e?t:this._submitButtonText}setInputValues(e){this._inputList.forEach((t=>{t.value=e[t.name]}))}_getInputValues(){return this._inputList.forEach((e=>{this._inputValues[e.name]=e.value})),this._inputValues}setEventListeners(){this._popup.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues(),this._submitButton)})),super.setEventListeners()}close(){super.close(),this._popupForm.reset()}}const c=new class{constructor(e){let{baseUrl:t,headers:r}=e;this._baseUrl=t,this._headers=r}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}editUserInfo(e){let{name:t,description:r}=e;return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:t,about:r})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}addNewCard(e){let{name:t,link:r}=e;return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:t,link:r})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}deleteCard(e){let{cardId:t}=e;return fetch(`${this._baseUrl}/cards/${t}`,{method:"DELETE",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}addCardLike(e){return fetch(`${this._baseUrl}/cards/likes/${e}`,{method:"PUT",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}removeCardLike(e){return fetch(`${this._baseUrl}/cards/likes/${e}`,{method:"DELETE",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}updateProfileAvatar(e){let{link:t}=e;return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:t})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}showPromiseStatus(){return Promise.all([this.getInitialCards(),this.getUserInfo()]).then((e=>({initialCards:e[0],fetchedUserInfo:e[1]})))}}({baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"02e654eb-5ace-4af7-a9f1-ec1c835dc4d8","Content-Type":"application/json"}}),h=new class extends l{constructor(e){var t,r,s;super(e),t=this,s=e=>{this._imageElement.src=e.link,this._imageElement.alt=e.title,this._imageCaption.textContent=e.title,super.open()},(r=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var s=r.call(e,"string");if("object"!=typeof s)return s;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==typeof t?t:String(t)}(r="open"))in t?Object.defineProperty(t,r,{value:s,enumerable:!0,configurable:!0,writable:!0}):t[r]=s,this._imageElement=this._popup.querySelector(".modal__image"),this._imageCaption=this._popup.querySelector(".modal__caption")}}(".modal_content_card-preview");h.setEventListeners();const u=new class{constructor(e){let{nameSelector:t,jobSelector:r,avatarSelector:s}=e;this._name=document.querySelector(t),this._job=document.querySelector(r),this._avatar=document.querySelector(s)}getUserInfo(){return{name:this._name.textContent,description:this._job.textContent,avatar:this._avatar.src,id:this._userId}}setUserInfo(e){let{name:t,about:r,avatar:s,_id:i}=e;this._name.textContent=t,this._job.textContent=r,this._avatar.src=s,this._userId=i}}({nameSelector:".profile__name",jobSelector:".profile__title",avatarSelector:".profile__image"}),_=(e,t)=>{L.setCallback((()=>{c.deleteCard({cardId:e}).then((()=>{t.remove(),L.close()})).catch((e=>{console.log(e)}))})),L.open()},m=e=>{h.open(e)},p=e=>{c.addCardLike(e.getCardId()).then((t=>{e.addLike(t)})).catch((e=>{console.log(e)}))},f=e=>{c.removeCardLike(e.getCardId()).then((t=>{e.removeLike(t)})).catch((e=>{console.log(e)}))},v=t=>{let{data:r,isUserCard:s,isLiked:i}=t;return new e({data:r,templateSelector:"#card",handleImageClick:m,isUserCard:s,handleDeleteBinClick:_,isLiked:i,handleAddCardLike:p,handleRemoveCardLike:f}).generateCard()},k=new d(".modal_content_edit-profile",((e,t)=>{let{name:r,description:s}=e;k.renderLoading(!0),c.editUserInfo({name:r,description:s}).then((e=>{u.setUserInfo(e),k.close()})).catch((e=>{console.log(e)})).finally((()=>{k.renderLoading(!1)}))}));k.setEventListeners(),i.addEventListener("click",(()=>{k.setInputValues(u.getUserInfo()),o["profile-form"].checkInputErrors(),o["profile-form"].resetButtonState(),k.open()}));const C=new d(".modal_content_add-place",((e,t)=>{let{title:r,link:s}=e;C.renderLoading(!0),c.addNewCard({name:r,link:s}).then((e=>{const t=v({data:e,isUserCard:!0});g.prependItem(t),C.close()})).catch((e=>{console.log(e)})).finally((()=>{C.renderLoading(!1)}))}));C.setEventListeners(),s.addEventListener("click",(()=>{o["card-form"].resetButtonState(),C.open()}));const L=new class extends l{constructor(e){let{popupSelector:t}=e;super(t)}setCallback(e){this._handleDeleteCardConfirmSubmit=e}setEventListeners(){this._popup.addEventListener("submit",(e=>{e.preventDefault(),this._handleDeleteCardConfirmSubmit(this._cardId)})),super.setEventListeners()}}({popupSelector:".modal_content_card-delete-confirm"});L.setEventListeners();const b=new d(".modal_content_edit-avatar",((e,t)=>{let{link:r}=e;b.renderLoading(!0),c.updateProfileAvatar({link:r}).then((e=>{u.setUserInfo(e),b.close()})).catch((e=>{console.log(e)})).finally((()=>{b.renderLoading(!1)}))}));b.setEventListeners(),n.addEventListener("click",(()=>{o["avatar-form"].resetButtonState(),b.open()}));const g=new class{constructor(e,t){let{renderer:r}=e;this._renderer=r,this._container=document.querySelector(t)}renderItems(e){this._renderedItems=e,this._renderedItems.forEach((e=>this._renderer(e)))}prependItem(e){this._container.prepend(e)}setItem(e){this._container.append(e)}}({renderer:e=>{const t=v({data:e,isUserCard:u.getUserInfo().id===e.owner._id,isLiked:e.likes.some((e=>e._id===u.getUserInfo().id))});g.setItem(t)}},".gallery__cards");c.showPromiseStatus().then((e=>{let{initialCards:t,fetchedUserInfo:r}=e;u.setUserInfo(r),g.renderItems(t)})).catch((e=>{console.log(e)})),[...document.querySelectorAll(r.formSelector)].forEach((e=>{const s=new t(r,e),i=e.getAttribute("name");o[i]=s,s.enableValidation()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LE1BQU1xSixFQUFZLElBQUl2SixFQUFjd0MsRUFBV3RDLEdBQ3pDc0osRUFBV3RKLEVBQVl1SixhQUFhLFFBRTFDN0csRUFBZTRHLEdBQVlELEVBQzNCQSxFQUFVcEgsa0JBQWtCLEciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zZV9wcm9qZWN0X2Fyb3VuZHRoZXVzLy4vc3JjL2NvbXBvbmVudHMvQ2FyZC5qcyIsIndlYnBhY2s6Ly9zZV9wcm9qZWN0X2Fyb3VuZHRoZXVzLy4vc3JjL2NvbXBvbmVudHMvRm9ybVZhbGlkYXRvci5qcyIsIndlYnBhY2s6Ly9zZV9wcm9qZWN0X2Fyb3VuZHRoZXVzLy4vc3JjL3V0aWxzL2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly9zZV9wcm9qZWN0X2Fyb3VuZHRoZXVzLy4vc3JjL2NvbXBvbmVudHMvUG9wdXAuanMiLCJ3ZWJwYWNrOi8vc2VfcHJvamVjdF9hcm91bmR0aGV1cy8uL3NyYy9jb21wb25lbnRzL1BvcHVwV2l0aEZvcm0uanMiLCJ3ZWJwYWNrOi8vc2VfcHJvamVjdF9hcm91bmR0aGV1cy8uL3NyYy9wYWdlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9zZV9wcm9qZWN0X2Fyb3VuZHRoZXVzLy4vc3JjL2NvbXBvbmVudHMvQXBpLmpzIiwid2VicGFjazovL3NlX3Byb2plY3RfYXJvdW5kdGhldXMvLi9zcmMvY29tcG9uZW50cy9Qb3B1cFdpdGhJbWFnZS5qcyIsIndlYnBhY2s6Ly9zZV9wcm9qZWN0X2Fyb3VuZHRoZXVzLy4vc3JjL2NvbXBvbmVudHMvVXNlckluZm8uanMiLCJ3ZWJwYWNrOi8vc2VfcHJvamVjdF9hcm91bmR0aGV1cy8uL3NyYy9jb21wb25lbnRzL1BvcHVwV2l0aENvbmZpcm1hdGlvbi5qcyIsIndlYnBhY2s6Ly9zZV9wcm9qZWN0X2Fyb3VuZHRoZXVzLy4vc3JjL2NvbXBvbmVudHMvU2VjdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBDYXJkIHtcclxuICBjb25zdHJ1Y3Rvcih7XHJcbiAgICBkYXRhLFxyXG4gICAgdGVtcGxhdGVTZWxlY3RvcixcclxuICAgIGhhbmRsZUltYWdlQ2xpY2ssXHJcbiAgICBpc1VzZXJDYXJkLFxyXG4gICAgaGFuZGxlRGVsZXRlQmluQ2xpY2ssXHJcbiAgICBpc0xpa2VkLFxyXG4gICAgaGFuZGxlQWRkQ2FyZExpa2UsXHJcbiAgICBoYW5kbGVSZW1vdmVDYXJkTGlrZSxcclxuICB9KSB7XHJcbiAgICB0aGlzLl90aXRsZSA9IGRhdGEubmFtZTtcclxuICAgIHRoaXMuX2xpbmsgPSBkYXRhLmxpbms7XHJcbiAgICB0aGlzLl90ZW1wbGF0ZVNlbGVjdG9yID0gdGVtcGxhdGVTZWxlY3RvcjtcclxuICAgIHRoaXMuX2hhbmRsZUltYWdlQ2xpY2sgPSBoYW5kbGVJbWFnZUNsaWNrO1xyXG4gICAgdGhpcy5fbGlrZXMgPSBkYXRhLmxpa2VzO1xyXG4gICAgdGhpcy5faWQgPSBkYXRhLl9pZDtcclxuICAgIHRoaXMuX2hhbmRsZURlbGV0ZUJpbkNsaWNrID0gaGFuZGxlRGVsZXRlQmluQ2xpY2s7XHJcbiAgICB0aGlzLl9pc0xpa2VkID0gaXNMaWtlZDtcclxuICAgIHRoaXMuX293bmVySWQgPSBkYXRhLm93bmVyLl9pZDtcclxuICAgIHRoaXMuX2lzVXNlckNhcmQgPSBpc1VzZXJDYXJkO1xyXG4gICAgdGhpcy5faGFuZGxlQWRkQ2FyZExpa2UgPSBoYW5kbGVBZGRDYXJkTGlrZTtcclxuICAgIHRoaXMuX2hhbmRsZVJlbW92ZUNhcmRMaWtlID0gaGFuZGxlUmVtb3ZlQ2FyZExpa2U7XHJcbiAgfVxyXG5cclxuICBnZXRDYXJkSWQoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5faWQ7XHJcbiAgfVxyXG5cclxuICBfc2V0Q2FyZExpa2VzKCkge1xyXG4gICAgdGhpcy5fY2FyZExpa2VDb3VudC50ZXh0Q29udGVudCA9IHRoaXMuX2xpa2VzLmxlbmd0aDtcclxuICAgIGlmICh0aGlzLl9pc0xpa2VkKSB7XHJcbiAgICAgIHRoaXMuX2xpa2VCdXR0b24uY2xhc3NMaXN0LmFkZChcImNhcmRfX2xpa2UtYnV0dG9uLWNsaWNrZWRcIik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBfc2V0RGVsZXRlQnV0dG9uKCkge1xyXG4gICAgdGhpcy5fZGVsZXRlQnV0dG9uID0gdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRfX2RlbGV0ZS1idXR0b25cIik7XHJcbiAgICBpZiAoIXRoaXMuX2lzVXNlckNhcmQpIHtcclxuICAgICAgdGhpcy5fZGVsZXRlQnV0dG9uLnJlbW92ZSgpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5fZGVsZXRlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5faGFuZGxlRGVsZXRlQmluQ2xpY2sodGhpcy5faWQsIHRoaXMuX2VsZW1lbnQpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIF9nZXRDYXJkVGVtcGxhdGUoKSB7XHJcbiAgICBjb25zdCBjYXJkVGVtcGxhdGUgPSBkb2N1bWVudFxyXG4gICAgICAucXVlcnlTZWxlY3Rvcih0aGlzLl90ZW1wbGF0ZVNlbGVjdG9yKVxyXG4gICAgICAuY29udGVudC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRcIilcclxuICAgICAgLmNsb25lTm9kZSh0cnVlKTtcclxuXHJcbiAgICByZXR1cm4gY2FyZFRlbXBsYXRlO1xyXG4gIH1cclxuXHJcbiAgYWRkTGlrZShjYXJkKSB7XHJcbiAgICB0aGlzLl9saWtlQnV0dG9uLmNsYXNzTGlzdC5hZGQoXCJjYXJkX19saWtlLWJ1dHRvbi1jbGlja2VkXCIpO1xyXG4gICAgdGhpcy5fY2FyZExpa2VDb3VudC50ZXh0Q29udGVudCA9IGNhcmQubGlrZXMubGVuZ3RoO1xyXG4gICAgdGhpcy5faXNMaWtlZCA9ICF0aGlzLl9pc0xpa2VkO1xyXG4gIH1cclxuXHJcbiAgcmVtb3ZlTGlrZShjYXJkKSB7XHJcbiAgICB0aGlzLl9saWtlQnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoXCJjYXJkX19saWtlLWJ1dHRvbi1jbGlja2VkXCIpO1xyXG4gICAgdGhpcy5fY2FyZExpa2VDb3VudC50ZXh0Q29udGVudCA9IGNhcmQubGlrZXMubGVuZ3RoO1xyXG4gICAgdGhpcy5faXNMaWtlZCA9ICF0aGlzLl9pc0xpa2VkO1xyXG4gIH1cclxuXHJcbiAgX2hhbmRsZUxpa2VDbGljayA9ICgpID0+IHtcclxuICAgIGlmICghdGhpcy5faXNMaWtlZCkge1xyXG4gICAgICB0aGlzLl9oYW5kbGVBZGRDYXJkTGlrZSh0aGlzKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuX2hhbmRsZVJlbW92ZUNhcmRMaWtlKHRoaXMpO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIF9zZXRFdmVudExpc3RlbmVycygpIHtcclxuICAgIGNvbnN0IGNhcmRJbWFnZSA9IHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkX19pbWFnZVwiKTtcclxuXHJcbiAgICB0aGlzLl9saWtlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgIHRoaXMuX2hhbmRsZUxpa2VDbGljayh0aGlzKTtcclxuICAgIH0pO1xyXG4gICAgY2FyZEltYWdlLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgIHRoaXMuX2hhbmRsZUltYWdlQ2xpY2soeyB0aXRsZTogdGhpcy5fdGl0bGUsIGxpbms6IHRoaXMuX2xpbmsgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGdlbmVyYXRlQ2FyZCgpIHtcclxuICAgIHRoaXMuX2VsZW1lbnQgPSB0aGlzLl9nZXRDYXJkVGVtcGxhdGUoKTtcclxuICAgIGNvbnN0IGNhcmRUaXRsZSA9IHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkX190aXRsZVwiKTtcclxuICAgIGNvbnN0IGNhcmRJbWFnZSA9IHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkX19pbWFnZVwiKTtcclxuICAgIHRoaXMuX2NhcmRMaWtlQ291bnQgPSB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9fbGlrZS1jb3VudFwiKTtcclxuICAgIHRoaXMuX2xpa2VCdXR0b24gPSB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9fbGlrZS1idXR0b25cIik7XHJcblxyXG4gICAgY2FyZEltYWdlLmFsdCA9IHRoaXMuX3RpdGxlO1xyXG4gICAgY2FyZFRpdGxlLnRleHRDb250ZW50ID0gdGhpcy5fdGl0bGU7XHJcbiAgICBjYXJkSW1hZ2Uuc3JjID0gdGhpcy5fbGluaztcclxuXHJcbiAgICB0aGlzLl9zZXRFdmVudExpc3RlbmVycygpO1xyXG4gICAgdGhpcy5fc2V0RGVsZXRlQnV0dG9uKCk7XHJcbiAgICB0aGlzLl9zZXRDYXJkTGlrZXMoKTtcclxuXHJcbiAgICByZXR1cm4gdGhpcy5fZWxlbWVudDtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7IENhcmQgfTtcclxuIiwiY2xhc3MgRm9ybVZhbGlkYXRvciB7XG4gIGNvbnN0cnVjdG9yKHNldHRpbmdzT2JqZWN0LCBmb3JtRWxlbWVudCkge1xuICAgIHRoaXMuX2Zvcm1TZWxlY3RvciA9IHNldHRpbmdzT2JqZWN0LmZvcm1TZWxlY3RvcjtcbiAgICB0aGlzLl9pbnB1dFNlbGVjdG9yID0gc2V0dGluZ3NPYmplY3QuaW5wdXRTZWxlY3RvcjtcbiAgICB0aGlzLl9zdWJtaXRCdXR0b25TZWxlY3RvciA9IHNldHRpbmdzT2JqZWN0LnN1Ym1pdEJ1dHRvblNlbGVjdG9yO1xuICAgIHRoaXMuX2luYWN0aXZlQnV0dG9uQ2xhc3MgPSBzZXR0aW5nc09iamVjdC5pbmFjdGl2ZUJ1dHRvbkNsYXNzO1xuICAgIHRoaXMuX2lucHV0RXJyb3JDbGFzcyA9IHNldHRpbmdzT2JqZWN0LmlucHV0RXJyb3JDbGFzcztcbiAgICB0aGlzLl9lcnJvckNsYXNzID0gc2V0dGluZ3NPYmplY3QuZXJyb3JDbGFzcztcbiAgICB0aGlzLl9mb3JtRWxlbWVudCA9IGZvcm1FbGVtZW50O1xuICAgIHRoaXMuX2lucHV0TGlzdCA9IFtcbiAgICAgIC4uLnRoaXMuX2Zvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodGhpcy5faW5wdXRTZWxlY3RvciksXG4gICAgXTtcbiAgICB0aGlzLl9idXR0b25FbGVtZW50ID0gdGhpcy5fZm9ybUVsZW1lbnQucXVlcnlTZWxlY3RvcihcbiAgICAgIHRoaXMuX3N1Ym1pdEJ1dHRvblNlbGVjdG9yXG4gICAgKTtcbiAgfVxuXG4gIF9zaG93RXJyb3JJbnB1dChpbnB1dEVsZW1lbnQsIGVycm9yTWVzc2FnZSkge1xuICAgIGNvbnN0IGVycm9yRWxlbWVudCA9IHRoaXMuX2Zvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXG4gICAgICBgLiR7aW5wdXRFbGVtZW50LmlkfS1lcnJvcmBcbiAgICApO1xuICAgIGlucHV0RWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMuX2lucHV0RXJyb3JDbGFzcyk7XG4gICAgZXJyb3JFbGVtZW50LnRleHRDb250ZW50ID0gZXJyb3JNZXNzYWdlO1xuICAgIGVycm9yRWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMuX2Vycm9yQ2xhc3MpO1xuICB9XG5cbiAgX2hpZGVFcnJvcklucHV0KGlucHV0RWxlbWVudCkge1xuICAgIGNvbnN0IGVycm9yRWxlbWVudCA9IHRoaXMuX2Zvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXG4gICAgICBgLiR7aW5wdXRFbGVtZW50LmlkfS1lcnJvcmBcbiAgICApO1xuICAgIGlucHV0RWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX2lucHV0RXJyb3JDbGFzcyk7XG4gICAgZXJyb3JFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUodGhpcy5fZXJyb3JDbGFzcyk7XG4gICAgZXJyb3JFbGVtZW50LnRleHRDb250ZW50ID0gXCJcIjtcbiAgfVxuXG4gIF90b2dnbGVJbnB1dEVycm9yKGlucHV0RWxlbWVudCkge1xuICAgIGlmICghaW5wdXRFbGVtZW50LnZhbGlkaXR5LnZhbGlkKSB7XG4gICAgICB0aGlzLl9zaG93RXJyb3JJbnB1dChpbnB1dEVsZW1lbnQsIGlucHV0RWxlbWVudC52YWxpZGF0aW9uTWVzc2FnZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2hpZGVFcnJvcklucHV0KGlucHV0RWxlbWVudCk7XG4gICAgfVxuICB9XG5cbiAgX2hhc0ludmFsaWRJbnB1dChpbnB1dExpc3QpIHtcbiAgICByZXR1cm4gaW5wdXRMaXN0LnNvbWUoKGlucHV0RWxlbWVudCkgPT4gIWlucHV0RWxlbWVudC52YWxpZGl0eS52YWxpZCk7XG4gIH1cblxuICBfdG9nZ2xlQnV0dG9uU3RhdGUoKSB7XG4gICAgaWYgKHRoaXMuX2hhc0ludmFsaWRJbnB1dCh0aGlzLl9pbnB1dExpc3QpKSB7XG4gICAgICB0aGlzLl9idXR0b25FbGVtZW50LmRpc2FibGVkID0gdHJ1ZTtcbiAgICAgIHRoaXMuX2J1dHRvbkVsZW1lbnQuY2xhc3NMaXN0LmFkZCh0aGlzLl9pbmFjdGl2ZUJ1dHRvbkNsYXNzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fYnV0dG9uRWxlbWVudC5kaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5fYnV0dG9uRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX2luYWN0aXZlQnV0dG9uQ2xhc3MpO1xuICAgIH1cbiAgfVxuXG4gIF9zZXRFdmVudExpc3RlbmVycygpIHtcbiAgICB0aGlzLl90b2dnbGVCdXR0b25TdGF0ZSgpO1xuICAgIHRoaXMuX2lucHV0TGlzdC5mb3JFYWNoKChpbnB1dEVsZW1lbnQpID0+IHtcbiAgICAgIGlucHV0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgKCkgPT4ge1xuICAgICAgICB0aGlzLl90b2dnbGVJbnB1dEVycm9yKGlucHV0RWxlbWVudCk7XG4gICAgICAgIHRoaXMuX3RvZ2dsZUJ1dHRvblN0YXRlKCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGVuYWJsZVZhbGlkYXRpb24oKSB7XG4gICAgdGhpcy5fZm9ybUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCAoZXZ0KSA9PiB7XG4gICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9KTtcbiAgICB0aGlzLl9zZXRFdmVudExpc3RlbmVycygpO1xuICB9XG5cbiAgcmVzZXRCdXR0b25TdGF0ZSgpIHtcbiAgICB0aGlzLl90b2dnbGVCdXR0b25TdGF0ZSgpO1xuICB9XG5cbiAgY2hlY2tJbnB1dEVycm9ycygpIHtcbiAgICB0aGlzLl9pbnB1dExpc3QuZm9yRWFjaCgoaW5wdXRFbGVtZW50KSA9PiB7XG4gICAgICB0aGlzLl90b2dnbGVJbnB1dEVycm9yKGlucHV0RWxlbWVudCk7XG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IHsgRm9ybVZhbGlkYXRvciB9O1xuIiwiZXhwb3J0IGNvbnN0IGNvbmZpZ09iaiA9IHtcclxuICBmb3JtU2VsZWN0b3I6IFwiLm1vZGFsX19mb3JtXCIsXHJcbiAgaW5wdXRTZWxlY3RvcjogXCIuZm9ybV9faW5wdXRcIixcclxuICBzdWJtaXRCdXR0b25TZWxlY3RvcjogXCIuZm9ybV9fYnV0dG9uXCIsXHJcbiAgaW5hY3RpdmVCdXR0b25DbGFzczogXCJmb3JtX19idXR0b25fZGlzYWJsZWRcIixcclxuICBpbnB1dEVycm9yQ2xhc3M6IFwiZm9ybV9faW5wdXRfdHlwZV9lcnJvclwiLFxyXG4gIGVycm9yQ2xhc3M6IFwiZm9ybV9fZXJyb3JfdmlzaWJsZVwiLFxyXG59O1xyXG5cclxuLy9wcm9maWxlIG5vZGVzXHJcbmV4cG9ydCBjb25zdCBwcm9maWxlTmFtZVNlbGVjdG9yID0gXCIucHJvZmlsZV9fbmFtZVwiO1xyXG5leHBvcnQgY29uc3QgcHJvZmlsZURlc2NyaXB0aW9uU2VsZWN0b3IgPSBcIi5wcm9maWxlX190aXRsZVwiO1xyXG5leHBvcnQgY29uc3QgcHJvZmlsZUF2YXRhclNlbGVjdG9yID0gXCIucHJvZmlsZV9faW1hZ2VcIjtcclxuXHJcbi8vdGVtcGxhdGUgc2VsZWN0b3JcclxuZXhwb3J0IGNvbnN0IHRlbXBsYXRlU2VsZWN0b3IgPSBcIiNjYXJkXCI7XHJcblxyXG4vLyAvL21vZGFscyBzZWxlY3RvcnNcclxuZXhwb3J0IGNvbnN0IGFkZENhcmRQb3B1cFNlbGVjdG9yID0gXCIubW9kYWxfY29udGVudF9hZGQtcGxhY2VcIjtcclxuZXhwb3J0IGNvbnN0IGVkaXRQcm9maWxlUG9wdXBTZWxlY3RvciA9IFwiLm1vZGFsX2NvbnRlbnRfZWRpdC1wcm9maWxlXCI7XHJcbmV4cG9ydCBjb25zdCBpbWFnZVByZXZpZXdQb3B1cFNlbGVjdG9yID0gXCIubW9kYWxfY29udGVudF9jYXJkLXByZXZpZXdcIjtcclxuZXhwb3J0IGNvbnN0IGRlbGV0ZUNvbmZpcm1Qb3B1cFNlbGVjdG9yID0gXCIubW9kYWxfY29udGVudF9jYXJkLWRlbGV0ZS1jb25maXJtXCI7XHJcbmV4cG9ydCBjb25zdCBlZGl0UHJvZmlsZUF2YXRhclBvcHVwU2VsZWN0b3IgPSBcIi5tb2RhbF9jb250ZW50X2VkaXQtYXZhdGFyXCI7XHJcblxyXG4vL2FwaSB2YXJpYWJsZXNcclxuZXhwb3J0IGNvbnN0IGFwaUJhc2VVcmwgPSBcImh0dHBzOi8vYXJvdW5kLm5vbW9yZXBhcnRpZXMuY28vdjEvZ3JvdXAtMTJcIjtcclxuZXhwb3J0IGNvbnN0IGFwaUhlYWRlck9iamVjdCA9IHtcclxuICBhdXRob3JpemF0aW9uOiBcIjAyZTY1NGViLTVhY2UtNGFmNy1hOWYxLWVjMWM4MzVkYzRkOFwiLFxyXG4gIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxyXG59O1xyXG5cclxuLy9idXR0b25zXHJcbmV4cG9ydCBjb25zdCBhZGRDYXJkQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wcm9maWxlX19hZGQtYnV0dG9uXCIpO1xyXG5leHBvcnQgY29uc3QgZWRpdFByb2ZpbGVCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gIFwiLnByb2ZpbGVfX2VkaXQtYnV0dG9uXCJcclxuKTtcclxuZXhwb3J0IGNvbnN0IGVkaXRQcm9maWxlQXZhdGFyQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcclxuICBcIi5wcm9maWxlX19pbWFnZS1lZGl0LWJ1dHRvblwiXHJcbik7XHJcblxyXG4vL2Zvcm0gdmFsaWRhdG9yc1xyXG5leHBvcnQgY29uc3QgZm9ybVZhbGlkYXRvcnMgPSB7fTtcclxuIiwiY2xhc3MgUG9wdXAge1xuICBjb25zdHJ1Y3Rvcihwb3B1cFNlbGVjdG9yKSB7XG4gICAgdGhpcy5fcG9wdXAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHBvcHVwU2VsZWN0b3IpO1xuICB9XG5cbiAgb3BlbigpIHtcbiAgICB0aGlzLl9wb3B1cC5jbGFzc0xpc3QuYWRkKFwibW9kYWxfb3BlbmVkXCIpO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMuX2hhbmRsZUVzY0Nsb3NlKTtcbiAgfVxuXG4gIGNsb3NlKCkge1xuICAgIHRoaXMuX3BvcHVwLmNsYXNzTGlzdC5yZW1vdmUoXCJtb2RhbF9vcGVuZWRcIik7XG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgdGhpcy5faGFuZGxlRXNjQ2xvc2UpO1xuICB9XG5cbiAgX2hhbmRsZUVzY0Nsb3NlID0gKGV2dCkgPT4ge1xuICAgIGlmIChldnQua2V5ID09PSBcIkVzY2FwZVwiKSB7XG4gICAgICB0aGlzLmNsb3NlKCk7XG4gICAgfVxuICB9O1xuXG4gIF9oYW5kbGVPdXRzaWRlQ2xpY2sgPSAoZXZ0KSA9PiB7XG4gICAgaWYgKGV2dC50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwibW9kYWxcIikpIHtcbiAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICB9XG4gIH07XG5cbiAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgdGhpcy5fY2xvc2VCdXR0b24gPSB0aGlzLl9wb3B1cC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19jbG9zZS1idXR0b25cIik7XG5cbiAgICB0aGlzLl9jbG9zZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgICAgdGhpcy5jbG9zZSgpO1xuICAgIH0pO1xuICAgIHRoaXMuX3BvcHVwLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgdGhpcy5faGFuZGxlT3V0c2lkZUNsaWNrKTtcbiAgfVxufVxuXG5leHBvcnQgeyBQb3B1cCB9O1xuIiwiaW1wb3J0IHsgUG9wdXAgfSBmcm9tIFwiLi9Qb3B1cC5qc1wiO1xyXG5cclxuY2xhc3MgUG9wdXBXaXRoRm9ybSBleHRlbmRzIFBvcHVwIHtcclxuICBjb25zdHJ1Y3Rvcihwb3B1cFNlbGVjdG9yLCBoYW5kbGVGb3JtU3VibWl0KSB7XHJcbiAgICBzdXBlcihwb3B1cFNlbGVjdG9yKTtcclxuICAgIHRoaXMuX2hhbmRsZUZvcm1TdWJtaXQgPSBoYW5kbGVGb3JtU3VibWl0O1xyXG4gICAgdGhpcy5fcG9wdXBGb3JtID0gdGhpcy5fcG9wdXAucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9fZm9ybVwiKTtcclxuICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbiA9IHRoaXMuX3BvcHVwLnF1ZXJ5U2VsZWN0b3IoXCIuZm9ybV9fYnV0dG9uXCIpO1xyXG4gICAgdGhpcy5fc3VibWl0QnV0dG9uVGV4dCA9IHRoaXMuX3N1Ym1pdEJ1dHRvbi50ZXh0Q29udGVudDtcclxuICAgIHRoaXMuX2lucHV0TGlzdCA9IHRoaXMuX3BvcHVwLnF1ZXJ5U2VsZWN0b3JBbGwoXCIuZm9ybV9faW5wdXRcIik7XHJcbiAgICB0aGlzLl9pbnB1dFZhbHVlcyA9IHt9O1xyXG4gIH1cclxuXHJcbiAgcmVuZGVyTG9hZGluZyhpc0xvYWRpbmcsIGxvYWRpbmdUZXh0ID0gXCJTYXZpbmcuLi5cIikge1xyXG4gICAgaWYgKGlzTG9hZGluZykge1xyXG4gICAgICB0aGlzLl9zdWJtaXRCdXR0b24udGV4dENvbnRlbnQgPSBsb2FkaW5nVGV4dDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbi50ZXh0Q29udGVudCA9IHRoaXMuX3N1Ym1pdEJ1dHRvblRleHQ7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzZXRJbnB1dFZhbHVlcyhkYXRhKSB7XHJcbiAgICB0aGlzLl9pbnB1dExpc3QuZm9yRWFjaCgoaW5wdXQpID0+IHtcclxuICAgICAgaW5wdXQudmFsdWUgPSBkYXRhW2lucHV0Lm5hbWVdO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBfZ2V0SW5wdXRWYWx1ZXMoKSB7XHJcbiAgICB0aGlzLl9pbnB1dExpc3QuZm9yRWFjaCgoaW5wdXQpID0+IHtcclxuICAgICAgdGhpcy5faW5wdXRWYWx1ZXNbaW5wdXQubmFtZV0gPSBpbnB1dC52YWx1ZTtcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiB0aGlzLl9pbnB1dFZhbHVlcztcclxuICB9XHJcblxyXG4gIHNldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgdGhpcy5fcG9wdXAuYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCAoZXZ0KSA9PiB7XHJcbiAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICB0aGlzLl9oYW5kbGVGb3JtU3VibWl0KHRoaXMuX2dldElucHV0VmFsdWVzKCksIHRoaXMuX3N1Ym1pdEJ1dHRvbik7XHJcbiAgICB9KTtcclxuICAgIHN1cGVyLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgfVxyXG5cclxuICBjbG9zZSgpIHtcclxuICAgIHN1cGVyLmNsb3NlKCk7XHJcbiAgICB0aGlzLl9wb3B1cEZvcm0ucmVzZXQoKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7IFBvcHVwV2l0aEZvcm0gfTtcclxuIiwiaW1wb3J0IHsgQ2FyZCB9IGZyb20gXCIuLi9jb21wb25lbnRzL0NhcmQuanNcIjtcclxuaW1wb3J0IHsgRm9ybVZhbGlkYXRvciB9IGZyb20gXCIuLi9jb21wb25lbnRzL0Zvcm1WYWxpZGF0b3IuanNcIjtcclxuaW1wb3J0IHtcclxuICBjb25maWdPYmosXHJcbiAgcHJvZmlsZU5hbWVTZWxlY3RvcixcclxuICBwcm9maWxlRGVzY3JpcHRpb25TZWxlY3RvcixcclxuICBwcm9maWxlQXZhdGFyU2VsZWN0b3IsXHJcbiAgdGVtcGxhdGVTZWxlY3RvcixcclxuICBhZGRDYXJkUG9wdXBTZWxlY3RvcixcclxuICBlZGl0UHJvZmlsZVBvcHVwU2VsZWN0b3IsXHJcbiAgaW1hZ2VQcmV2aWV3UG9wdXBTZWxlY3RvcixcclxuICBkZWxldGVDb25maXJtUG9wdXBTZWxlY3RvcixcclxuICBlZGl0UHJvZmlsZUF2YXRhclBvcHVwU2VsZWN0b3IsXHJcbiAgYXBpQmFzZVVybCxcclxuICBhcGlIZWFkZXJPYmplY3QsXHJcbiAgYWRkQ2FyZEJ1dHRvbixcclxuICBlZGl0UHJvZmlsZUJ1dHRvbixcclxuICBlZGl0UHJvZmlsZUF2YXRhckJ1dHRvbixcclxuICBmb3JtVmFsaWRhdG9ycyxcclxufSBmcm9tIFwiLi4vdXRpbHMvY29uc3RhbnRzLmpzXCI7XHJcbmltcG9ydCB7IFNlY3Rpb24gfSBmcm9tIFwiLi4vY29tcG9uZW50cy9TZWN0aW9uLmpzXCI7XHJcbmltcG9ydCB7IFBvcHVwV2l0aEZvcm0gfSBmcm9tIFwiLi4vY29tcG9uZW50cy9Qb3B1cFdpdGhGb3JtLmpzXCI7XHJcbmltcG9ydCB7IFBvcHVwV2l0aEltYWdlIH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvUG9wdXBXaXRoSW1hZ2UuanNcIjtcclxuaW1wb3J0IHsgUG9wdXBXaXRoQ29uZmlybWF0aW9uIH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvUG9wdXBXaXRoQ29uZmlybWF0aW9uLmpzXCI7XHJcbmltcG9ydCB7IFVzZXJJbmZvIH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvVXNlckluZm8uanNcIjtcclxuaW1wb3J0IHsgQXBpIH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvQXBpLmpzXCI7XHJcbmltcG9ydCBcIi4vaW5kZXguY3NzXCI7XHJcblxyXG4vL2FwaSBjbGFzc1xyXG5jb25zdCBhcGkgPSBuZXcgQXBpKHsgYmFzZVVybDogYXBpQmFzZVVybCwgaGVhZGVyczogYXBpSGVhZGVyT2JqZWN0IH0pO1xyXG5cclxuLy9pbWFnZSBwcmV2aWV3IHBvcHVwXHJcbmNvbnN0IGltYWdlUHJldmlld1BvcHVwID0gbmV3IFBvcHVwV2l0aEltYWdlKGltYWdlUHJldmlld1BvcHVwU2VsZWN0b3IpO1xyXG5pbWFnZVByZXZpZXdQb3B1cC5zZXRFdmVudExpc3RlbmVycygpO1xyXG5cclxuLy91c2VyIGluZm9cclxuY29uc3QgdXNlckluZm8gPSBuZXcgVXNlckluZm8oe1xyXG4gIG5hbWVTZWxlY3RvcjogcHJvZmlsZU5hbWVTZWxlY3RvcixcclxuICBqb2JTZWxlY3RvcjogcHJvZmlsZURlc2NyaXB0aW9uU2VsZWN0b3IsXHJcbiAgYXZhdGFyU2VsZWN0b3I6IHByb2ZpbGVBdmF0YXJTZWxlY3RvcixcclxufSk7XHJcblxyXG4vL2ZpbGwgcHJvZmlsZSBmb3JtXHJcbmNvbnN0IGZpbGxQcm9maWxlRm9ybSA9ICgpID0+IHtcclxuICBlZGl0UHJvZmlsZVBvcHVwLnNldElucHV0VmFsdWVzKHVzZXJJbmZvLmdldFVzZXJJbmZvKCkpO1xyXG59O1xyXG5cclxuLy9oYW5kbGVyIGZ1bmN0aW9uc1xyXG5jb25zdCBoYW5kbGVEZWxldGVCaW5DbGljayA9IChjYXJkSWQsIGNhcmQpID0+IHtcclxuICBkZWxldGVDYXJkQ29uZmlybVBvcHVwLnNldENhbGxiYWNrKCgpID0+IHtcclxuICAgIGFwaVxyXG4gICAgICAuZGVsZXRlQ2FyZCh7IGNhcmRJZCB9KVxyXG4gICAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgICAgY2FyZC5yZW1vdmUoKTtcclxuICAgICAgICBkZWxldGVDYXJkQ29uZmlybVBvcHVwLmNsb3NlKCk7XHJcbiAgICAgIH0pXHJcbiAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2coZXJyKTtcclxuICAgICAgfSk7XHJcbiAgfSk7XHJcbiAgZGVsZXRlQ2FyZENvbmZpcm1Qb3B1cC5vcGVuKCk7XHJcbn07XHJcbmNvbnN0IGhhbmRsZUVkaXRCdXR0b25DbGljayA9ICgpID0+IHtcclxuICBmaWxsUHJvZmlsZUZvcm0oKTtcclxuXHJcbiAgZm9ybVZhbGlkYXRvcnNbXCJwcm9maWxlLWZvcm1cIl0uY2hlY2tJbnB1dEVycm9ycygpO1xyXG4gIGZvcm1WYWxpZGF0b3JzW1wicHJvZmlsZS1mb3JtXCJdLnJlc2V0QnV0dG9uU3RhdGUoKTtcclxuICBlZGl0UHJvZmlsZVBvcHVwLm9wZW4oKTtcclxufTtcclxuY29uc3QgaGFuZGxlUHJvZmlsZUVkaXRGb3JtU3VibWl0ID0gKHsgbmFtZSwgZGVzY3JpcHRpb24gfSwgYnV0dG9uKSA9PiB7XHJcbiAgZWRpdFByb2ZpbGVQb3B1cC5yZW5kZXJMb2FkaW5nKHRydWUpO1xyXG4gIGFwaVxyXG4gICAgLmVkaXRVc2VySW5mbyh7IG5hbWUsIGRlc2NyaXB0aW9uIH0pXHJcbiAgICAudGhlbigocmVzKSA9PiB7XHJcbiAgICAgIHVzZXJJbmZvLnNldFVzZXJJbmZvKHJlcyk7XHJcbiAgICAgIGVkaXRQcm9maWxlUG9wdXAuY2xvc2UoKTtcclxuICAgIH0pXHJcbiAgICAuY2F0Y2goKGVycikgPT4ge1xyXG4gICAgICBjb25zb2xlLmxvZyhlcnIpO1xyXG4gICAgfSlcclxuICAgIC5maW5hbGx5KCgpID0+IHtcclxuICAgICAgZWRpdFByb2ZpbGVQb3B1cC5yZW5kZXJMb2FkaW5nKGZhbHNlKTtcclxuICAgIH0pO1xyXG59O1xyXG5jb25zdCBoYW5kbGVBZGRQbGFjZUZvcm1TdWJtaXQgPSAoeyB0aXRsZSwgbGluayB9LCBidXR0b24pID0+IHtcclxuICBhZGRDYXJkUG9wdXAucmVuZGVyTG9hZGluZyh0cnVlKTtcclxuICBhcGlcclxuICAgIC5hZGROZXdDYXJkKHsgbmFtZTogdGl0bGUsIGxpbmsgfSlcclxuICAgIC50aGVuKChyZXMpID0+IHtcclxuICAgICAgY29uc3QgY2FyZEVsZW1lbnQgPSBjcmVhdGVDYXJkKHsgZGF0YTogcmVzLCBpc1VzZXJDYXJkOiB0cnVlIH0pO1xyXG5cclxuICAgICAgY2FyZEdhbGxlcnkucHJlcGVuZEl0ZW0oY2FyZEVsZW1lbnQpO1xyXG4gICAgICBhZGRDYXJkUG9wdXAuY2xvc2UoKTtcclxuICAgIH0pXHJcbiAgICAuY2F0Y2goKGVycikgPT4ge1xyXG4gICAgICBjb25zb2xlLmxvZyhlcnIpO1xyXG4gICAgfSlcclxuICAgIC5maW5hbGx5KCgpID0+IHtcclxuICAgICAgYWRkQ2FyZFBvcHVwLnJlbmRlckxvYWRpbmcoZmFsc2UpO1xyXG4gICAgfSk7XHJcbn07XHJcbmNvbnN0IGhhbmRsZUltYWdlQ2xpY2sgPSAoY2FyZCkgPT4ge1xyXG4gIGltYWdlUHJldmlld1BvcHVwLm9wZW4oY2FyZCk7XHJcbn07XHJcbmNvbnN0IGhhbmRsZUFkZENhcmRMaWtlID0gKGNhcmQpID0+IHtcclxuICBhcGlcclxuICAgIC5hZGRDYXJkTGlrZShjYXJkLmdldENhcmRJZCgpKVxyXG4gICAgLnRoZW4oKHJlcykgPT4ge1xyXG4gICAgICBjYXJkLmFkZExpa2UocmVzKTtcclxuICAgIH0pXHJcbiAgICAuY2F0Y2goKGVycikgPT4ge1xyXG4gICAgICBjb25zb2xlLmxvZyhlcnIpO1xyXG4gICAgfSk7XHJcbn07XHJcbmNvbnN0IGhhbmRsZVJlbW92ZUNhcmRMaWtlID0gKGNhcmQpID0+IHtcclxuICBhcGlcclxuICAgIC5yZW1vdmVDYXJkTGlrZShjYXJkLmdldENhcmRJZCgpKVxyXG4gICAgLnRoZW4oKHJlcykgPT4ge1xyXG4gICAgICBjYXJkLnJlbW92ZUxpa2UocmVzKTtcclxuICAgIH0pXHJcbiAgICAuY2F0Y2goKGVycikgPT4ge1xyXG4gICAgICBjb25zb2xlLmxvZyhlcnIpO1xyXG4gICAgfSk7XHJcbn07XHJcbmNvbnN0IGhhbmRsZUVkaXRQcm9maWxlQXZhdGFyU3VibWl0ID0gKHsgbGluayB9LCBidXR0b24pID0+IHtcclxuICBlZGl0UHJvZmlsZUF2YXRhclBvcHVwLnJlbmRlckxvYWRpbmcodHJ1ZSk7XHJcbiAgYXBpXHJcbiAgICAudXBkYXRlUHJvZmlsZUF2YXRhcih7IGxpbmsgfSlcclxuICAgIC50aGVuKChyZXMpID0+IHtcclxuICAgICAgdXNlckluZm8uc2V0VXNlckluZm8ocmVzKTtcclxuICAgICAgZWRpdFByb2ZpbGVBdmF0YXJQb3B1cC5jbG9zZSgpO1xyXG4gICAgfSlcclxuICAgIC5jYXRjaCgoZXJyKSA9PiB7XHJcbiAgICAgIGNvbnNvbGUubG9nKGVycik7XHJcbiAgICB9KVxyXG4gICAgLmZpbmFsbHkoKCkgPT4ge1xyXG4gICAgICBlZGl0UHJvZmlsZUF2YXRhclBvcHVwLnJlbmRlckxvYWRpbmcoZmFsc2UpO1xyXG4gICAgfSk7XHJcbn07XHJcblxyXG4vL2NyZWF0ZSBjYXJkIGVsZW1lbnRcclxuY29uc3QgY3JlYXRlQ2FyZCA9ICh7IGRhdGEsIGlzVXNlckNhcmQsIGlzTGlrZWQgfSkgPT4ge1xyXG4gIGNvbnN0IGNhcmRFbGVtZW50ID0gbmV3IENhcmQoe1xyXG4gICAgZGF0YSxcclxuICAgIHRlbXBsYXRlU2VsZWN0b3IsXHJcbiAgICBoYW5kbGVJbWFnZUNsaWNrLFxyXG4gICAgaXNVc2VyQ2FyZCxcclxuICAgIGhhbmRsZURlbGV0ZUJpbkNsaWNrLFxyXG4gICAgaXNMaWtlZCxcclxuICAgIGhhbmRsZUFkZENhcmRMaWtlLFxyXG4gICAgaGFuZGxlUmVtb3ZlQ2FyZExpa2UsXHJcbiAgfSk7XHJcbiAgcmV0dXJuIGNhcmRFbGVtZW50LmdlbmVyYXRlQ2FyZCgpO1xyXG59O1xyXG5cclxuLy92YWxpZGF0ZSBmb3Jtc1xyXG5jb25zdCBlbmFibGVWYWxpZGF0aW9uID0gKCkgPT4ge1xyXG4gIGNvbnN0IGZvcm1MaXN0ID0gWy4uLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoY29uZmlnT2JqLmZvcm1TZWxlY3RvcildO1xyXG4gIGZvcm1MaXN0LmZvckVhY2goKGZvcm1FbGVtZW50KSA9PiB7XHJcbiAgICBjb25zdCB2YWxpZGF0b3IgPSBuZXcgRm9ybVZhbGlkYXRvcihjb25maWdPYmosIGZvcm1FbGVtZW50KTtcclxuICAgIGNvbnN0IGZvcm1OYW1lID0gZm9ybUVsZW1lbnQuZ2V0QXR0cmlidXRlKFwibmFtZVwiKTtcclxuXHJcbiAgICBmb3JtVmFsaWRhdG9yc1tmb3JtTmFtZV0gPSB2YWxpZGF0b3I7XHJcbiAgICB2YWxpZGF0b3IuZW5hYmxlVmFsaWRhdGlvbigpO1xyXG4gIH0pO1xyXG59O1xyXG5cclxuLy9lZGl0IHByb2ZpbGUgcG9wdXBcclxuY29uc3QgZWRpdFByb2ZpbGVQb3B1cCA9IG5ldyBQb3B1cFdpdGhGb3JtKFxyXG4gIGVkaXRQcm9maWxlUG9wdXBTZWxlY3RvcixcclxuICBoYW5kbGVQcm9maWxlRWRpdEZvcm1TdWJtaXRcclxuKTtcclxuZWRpdFByb2ZpbGVQb3B1cC5zZXRFdmVudExpc3RlbmVycygpO1xyXG5lZGl0UHJvZmlsZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgaGFuZGxlRWRpdEJ1dHRvbkNsaWNrKTtcclxuXHJcbi8vYWRkIGNhcmQgcG9wdXBcclxuY29uc3QgYWRkQ2FyZFBvcHVwID0gbmV3IFBvcHVwV2l0aEZvcm0oXHJcbiAgYWRkQ2FyZFBvcHVwU2VsZWN0b3IsXHJcbiAgaGFuZGxlQWRkUGxhY2VGb3JtU3VibWl0XHJcbik7XHJcbmFkZENhcmRQb3B1cC5zZXRFdmVudExpc3RlbmVycygpO1xyXG5hZGRDYXJkQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgZm9ybVZhbGlkYXRvcnNbXCJjYXJkLWZvcm1cIl0ucmVzZXRCdXR0b25TdGF0ZSgpO1xyXG4gIGFkZENhcmRQb3B1cC5vcGVuKCk7XHJcbn0pO1xyXG5cclxuLy9kZWxldGUgY2FyZCBjb25maXJtYXRpb24gcG9wdXBcclxuY29uc3QgZGVsZXRlQ2FyZENvbmZpcm1Qb3B1cCA9IG5ldyBQb3B1cFdpdGhDb25maXJtYXRpb24oe1xyXG4gIHBvcHVwU2VsZWN0b3I6IGRlbGV0ZUNvbmZpcm1Qb3B1cFNlbGVjdG9yLFxyXG59KTtcclxuZGVsZXRlQ2FyZENvbmZpcm1Qb3B1cC5zZXRFdmVudExpc3RlbmVycygpO1xyXG5cclxuLy9jaGFuZ2UgYXZhdGFyIHBvcHVwXHJcbmNvbnN0IGVkaXRQcm9maWxlQXZhdGFyUG9wdXAgPSBuZXcgUG9wdXBXaXRoRm9ybShcclxuICBlZGl0UHJvZmlsZUF2YXRhclBvcHVwU2VsZWN0b3IsXHJcbiAgaGFuZGxlRWRpdFByb2ZpbGVBdmF0YXJTdWJtaXRcclxuKTtcclxuZWRpdFByb2ZpbGVBdmF0YXJQb3B1cC5zZXRFdmVudExpc3RlbmVycygpO1xyXG5lZGl0UHJvZmlsZUF2YXRhckJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gIGZvcm1WYWxpZGF0b3JzW1wiYXZhdGFyLWZvcm1cIl0ucmVzZXRCdXR0b25TdGF0ZSgpO1xyXG4gIGVkaXRQcm9maWxlQXZhdGFyUG9wdXAub3BlbigpO1xyXG59KTtcclxuXHJcbi8vY2FyZCBnYWxsZXJ5IHNlY3Rpb24gY2xhc3NcclxuY29uc3QgY2FyZEdhbGxlcnkgPSBuZXcgU2VjdGlvbihcclxuICB7XHJcbiAgICByZW5kZXJlcjogKGNhcmQpID0+IHtcclxuICAgICAgY29uc3QgY2FyZEVsZW1lbnQgPSBjcmVhdGVDYXJkKHtcclxuICAgICAgICBkYXRhOiBjYXJkLFxyXG4gICAgICAgIGlzVXNlckNhcmQ6IHVzZXJJbmZvLmdldFVzZXJJbmZvKCkuaWQgPT09IGNhcmQub3duZXIuX2lkLFxyXG4gICAgICAgIGlzTGlrZWQ6IGNhcmQubGlrZXMuc29tZShcclxuICAgICAgICAgIChsaWtlKSA9PiBsaWtlLl9pZCA9PT0gdXNlckluZm8uZ2V0VXNlckluZm8oKS5pZFxyXG4gICAgICAgICksXHJcbiAgICAgIH0pO1xyXG4gICAgICBjYXJkR2FsbGVyeS5zZXRJdGVtKGNhcmRFbGVtZW50KTtcclxuICAgIH0sXHJcbiAgfSxcclxuICBcIi5nYWxsZXJ5X19jYXJkc1wiXHJcbik7XHJcblxyXG4vL3JlbmRlcmluZyB0aGUgY2FyZHMgYW5kIHVzZXIgaW5mb1xyXG5hcGlcclxuICAuc2hvd1Byb21pc2VTdGF0dXMoKVxyXG4gIC50aGVuKCh7IGluaXRpYWxDYXJkcywgZmV0Y2hlZFVzZXJJbmZvIH0pID0+IHtcclxuICAgIHVzZXJJbmZvLnNldFVzZXJJbmZvKGZldGNoZWRVc2VySW5mbyk7XHJcbiAgICBjYXJkR2FsbGVyeS5yZW5kZXJJdGVtcyhpbml0aWFsQ2FyZHMpO1xyXG4gIH0pXHJcbiAgLmNhdGNoKChlcnIpID0+IHtcclxuICAgIGNvbnNvbGUubG9nKGVycik7XHJcbiAgfSk7XHJcblxyXG4vL3ZhbGlkYXRpbmcgYWxsIGZvcm1zXHJcbmVuYWJsZVZhbGlkYXRpb24oKTtcclxuIiwiY2xhc3MgQXBpIHtcclxuICBjb25zdHJ1Y3Rvcih7IGJhc2VVcmwsIGhlYWRlcnMgfSkge1xyXG4gICAgdGhpcy5fYmFzZVVybCA9IGJhc2VVcmw7XHJcbiAgICB0aGlzLl9oZWFkZXJzID0gaGVhZGVycztcclxuICB9XHJcblxyXG4gIGdldEluaXRpYWxDYXJkcygpIHtcclxuICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl9iYXNlVXJsfS9jYXJkc2AsIHtcclxuICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcclxuICAgIH0pLnRoZW4oKHJlcykgPT4ge1xyXG4gICAgICBpZiAocmVzLm9rKSB7XHJcbiAgICAgICAgcmV0dXJuIHJlcy5qc29uKCk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGBFcnJvcjogJHtyZXMuc3RhdHVzfWApO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBnZXRVc2VySW5mbygpIHtcclxuICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl9iYXNlVXJsfS91c2Vycy9tZWAsIHtcclxuICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcclxuICAgIH0pLnRoZW4oKHJlcykgPT4ge1xyXG4gICAgICBpZiAocmVzLm9rKSB7XHJcbiAgICAgICAgcmV0dXJuIHJlcy5qc29uKCk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGBFcnJvcjogJHtyZXMuc3RhdHVzfWApO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBlZGl0VXNlckluZm8oeyBuYW1lLCBkZXNjcmlwdGlvbiB9KSB7XHJcbiAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vdXNlcnMvbWVgLCB7XHJcbiAgICAgIG1ldGhvZDogXCJQQVRDSFwiLFxyXG4gICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxyXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgbmFtZTogbmFtZSxcclxuICAgICAgICBhYm91dDogZGVzY3JpcHRpb24sXHJcbiAgICAgIH0pLFxyXG4gICAgfSkudGhlbigocmVzKSA9PiB7XHJcbiAgICAgIGlmIChyZXMub2spIHtcclxuICAgICAgICByZXR1cm4gcmVzLmpzb24oKTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoYEVycm9yOiAke3Jlcy5zdGF0dXN9YCk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGFkZE5ld0NhcmQoeyBuYW1lLCBsaW5rIH0pIHtcclxuICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl9iYXNlVXJsfS9jYXJkc2AsIHtcclxuICAgICAgbWV0aG9kOiBcIlBPU1RcIixcclxuICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcclxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgICAgIG5hbWU6IG5hbWUsXHJcbiAgICAgICAgbGluazogbGluayxcclxuICAgICAgfSksXHJcbiAgICB9KS50aGVuKChyZXMpID0+IHtcclxuICAgICAgaWYgKHJlcy5vaykge1xyXG4gICAgICAgIHJldHVybiByZXMuanNvbigpO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChgRXJyb3I6ICR7cmVzLnN0YXR1c31gKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgZGVsZXRlQ2FyZCh7IGNhcmRJZCB9KSB7XHJcbiAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vY2FyZHMvJHtjYXJkSWR9YCwge1xyXG4gICAgICBtZXRob2Q6IFwiREVMRVRFXCIsXHJcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXHJcbiAgICB9KS50aGVuKChyZXMpID0+IHtcclxuICAgICAgaWYgKHJlcy5vaykge1xyXG4gICAgICAgIHJldHVybiByZXMuanNvbigpO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChgRXJyb3I6ICR7cmVzLnN0YXR1c31gKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgYWRkQ2FyZExpa2UoY2FyZElkKSB7XHJcbiAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vY2FyZHMvbGlrZXMvJHtjYXJkSWR9YCwge1xyXG4gICAgICBtZXRob2Q6IFwiUFVUXCIsXHJcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXHJcbiAgICB9KS50aGVuKChyZXMpID0+IHtcclxuICAgICAgaWYgKHJlcy5vaykge1xyXG4gICAgICAgIHJldHVybiByZXMuanNvbigpO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChgRXJyb3I6ICR7cmVzLnN0YXR1c31gKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcmVtb3ZlQ2FyZExpa2UoY2FyZElkKSB7XHJcbiAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vY2FyZHMvbGlrZXMvJHtjYXJkSWR9YCwge1xyXG4gICAgICBtZXRob2Q6IFwiREVMRVRFXCIsXHJcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXHJcbiAgICB9KS50aGVuKChyZXMpID0+IHtcclxuICAgICAgaWYgKHJlcy5vaykge1xyXG4gICAgICAgIHJldHVybiByZXMuanNvbigpO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChgRXJyb3I6ICR7cmVzLnN0YXR1c31gKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlUHJvZmlsZUF2YXRhcih7IGxpbmsgfSkge1xyXG4gICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX2Jhc2VVcmx9L3VzZXJzL21lL2F2YXRhcmAsIHtcclxuICAgICAgbWV0aG9kOiBcIlBBVENIXCIsXHJcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXHJcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcclxuICAgICAgICBhdmF0YXI6IGxpbmssXHJcbiAgICAgIH0pLFxyXG4gICAgfSkudGhlbigocmVzKSA9PiB7XHJcbiAgICAgIGlmIChyZXMub2spIHtcclxuICAgICAgICByZXR1cm4gcmVzLmpzb24oKTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoYEVycm9yOiAke3Jlcy5zdGF0dXN9YCk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHNob3dQcm9taXNlU3RhdHVzKCkge1xyXG4gICAgcmV0dXJuIFByb21pc2UuYWxsKFt0aGlzLmdldEluaXRpYWxDYXJkcygpLCB0aGlzLmdldFVzZXJJbmZvKCldKS50aGVuKFxyXG4gICAgICAocmVzKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHsgaW5pdGlhbENhcmRzOiByZXNbMF0sIGZldGNoZWRVc2VySW5mbzogcmVzWzFdIH07XHJcbiAgICAgIH1cclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgeyBBcGkgfTtcclxuIiwiaW1wb3J0IHsgUG9wdXAgfSBmcm9tIFwiLi9Qb3B1cC5qc1wiO1xyXG5cclxuY2xhc3MgUG9wdXBXaXRoSW1hZ2UgZXh0ZW5kcyBQb3B1cCB7XHJcbiAgY29uc3RydWN0b3IocG9wdXBTZWxlY3Rvcikge1xyXG4gICAgc3VwZXIocG9wdXBTZWxlY3Rvcik7XHJcbiAgICB0aGlzLl9pbWFnZUVsZW1lbnQgPSB0aGlzLl9wb3B1cC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19pbWFnZVwiKTtcclxuICAgIHRoaXMuX2ltYWdlQ2FwdGlvbiA9IHRoaXMuX3BvcHVwLnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWxfX2NhcHRpb25cIik7XHJcbiAgfVxyXG5cclxuICBvcGVuID0gKGRhdGEpID0+IHtcclxuICAgIHRoaXMuX2ltYWdlRWxlbWVudC5zcmMgPSBkYXRhLmxpbms7XHJcbiAgICB0aGlzLl9pbWFnZUVsZW1lbnQuYWx0ID0gZGF0YS50aXRsZTtcclxuICAgIHRoaXMuX2ltYWdlQ2FwdGlvbi50ZXh0Q29udGVudCA9IGRhdGEudGl0bGU7XHJcblxyXG4gICAgc3VwZXIub3BlbigpO1xyXG4gIH07XHJcbn1cclxuXHJcbmV4cG9ydCB7IFBvcHVwV2l0aEltYWdlIH07XHJcbiIsImNsYXNzIFVzZXJJbmZvIHtcclxuICBjb25zdHJ1Y3Rvcih7IG5hbWVTZWxlY3Rvciwgam9iU2VsZWN0b3IsIGF2YXRhclNlbGVjdG9yIH0pIHtcclxuICAgIHRoaXMuX25hbWUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKG5hbWVTZWxlY3Rvcik7XHJcbiAgICB0aGlzLl9qb2IgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGpvYlNlbGVjdG9yKTtcclxuICAgIHRoaXMuX2F2YXRhciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYXZhdGFyU2VsZWN0b3IpO1xyXG4gIH1cclxuXHJcbiAgZ2V0VXNlckluZm8oKSB7XHJcbiAgICBjb25zdCB1c2VySW5mbyA9IHtcclxuICAgICAgbmFtZTogdGhpcy5fbmFtZS50ZXh0Q29udGVudCxcclxuICAgICAgZGVzY3JpcHRpb246IHRoaXMuX2pvYi50ZXh0Q29udGVudCxcclxuICAgICAgYXZhdGFyOiB0aGlzLl9hdmF0YXIuc3JjLFxyXG4gICAgICBpZDogdGhpcy5fdXNlcklkLFxyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gdXNlckluZm87XHJcbiAgfVxyXG5cclxuICBzZXRVc2VySW5mbyh7IG5hbWUsIGFib3V0LCBhdmF0YXIsIF9pZCB9KSB7XHJcbiAgICB0aGlzLl9uYW1lLnRleHRDb250ZW50ID0gbmFtZTtcclxuICAgIHRoaXMuX2pvYi50ZXh0Q29udGVudCA9IGFib3V0O1xyXG4gICAgdGhpcy5fYXZhdGFyLnNyYyA9IGF2YXRhcjtcclxuICAgIHRoaXMuX3VzZXJJZCA9IF9pZDtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7IFVzZXJJbmZvIH07XHJcbiIsImltcG9ydCB7IFBvcHVwIH0gZnJvbSBcIi4vUG9wdXAuanNcIjtcclxuXHJcbmNsYXNzIFBvcHVwV2l0aENvbmZpcm1hdGlvbiBleHRlbmRzIFBvcHVwIHtcclxuICBjb25zdHJ1Y3Rvcih7IHBvcHVwU2VsZWN0b3IgfSkge1xyXG4gICAgc3VwZXIocG9wdXBTZWxlY3Rvcik7XHJcbiAgfVxyXG5cclxuICBzZXRDYWxsYmFjayhoYW5kbGVEZWxldGVDYXJkQ29uZmlybVN1Ym1pdCkge1xyXG4gICAgdGhpcy5faGFuZGxlRGVsZXRlQ2FyZENvbmZpcm1TdWJtaXQgPSBoYW5kbGVEZWxldGVDYXJkQ29uZmlybVN1Ym1pdDtcclxuICB9XHJcblxyXG4gIHNldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgdGhpcy5fcG9wdXAuYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCAoZXZ0KSA9PiB7XHJcbiAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICB0aGlzLl9oYW5kbGVEZWxldGVDYXJkQ29uZmlybVN1Ym1pdCh0aGlzLl9jYXJkSWQpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgc3VwZXIuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7IFBvcHVwV2l0aENvbmZpcm1hdGlvbiB9O1xyXG4iLCJjbGFzcyBTZWN0aW9uIHtcclxuICBjb25zdHJ1Y3Rvcih7IHJlbmRlcmVyIH0sIGNvbnRhaW5lclNlbGVjdG9yKSB7XHJcbiAgICB0aGlzLl9yZW5kZXJlciA9IHJlbmRlcmVyO1xyXG4gICAgdGhpcy5fY29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihjb250YWluZXJTZWxlY3Rvcik7XHJcbiAgfVxyXG5cclxuICByZW5kZXJJdGVtcyhpdGVtcykge1xyXG4gICAgdGhpcy5fcmVuZGVyZWRJdGVtcyA9IGl0ZW1zO1xyXG4gICAgdGhpcy5fcmVuZGVyZWRJdGVtcy5mb3JFYWNoKChpdGVtKSA9PiB0aGlzLl9yZW5kZXJlcihpdGVtKSk7XHJcbiAgfVxyXG5cclxuICBwcmVwZW5kSXRlbShlbGVtZW50KSB7XHJcbiAgICB0aGlzLl9jb250YWluZXIucHJlcGVuZChlbGVtZW50KTtcclxuICB9XHJcblxyXG4gIHNldEl0ZW0oZWxlbWVudCkge1xyXG4gICAgdGhpcy5fY29udGFpbmVyLmFwcGVuZChlbGVtZW50KTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7IFNlY3Rpb24gfTtcclxuIl0sIm5hbWVzIjpbIkNhcmQiLCJjb25zdHJ1Y3RvciIsImRhdGEiLCJ0ZW1wbGF0ZVNlbGVjdG9yIiwiaGFuZGxlSW1hZ2VDbGljayIsImlzVXNlckNhcmQiLCJoYW5kbGVEZWxldGVCaW5DbGljayIsImlzTGlrZWQiLCJoYW5kbGVBZGRDYXJkTGlrZSIsImhhbmRsZVJlbW92ZUNhcmRMaWtlIiwidGhpcyIsIl9pc0xpa2VkIiwiX2hhbmRsZVJlbW92ZUNhcmRMaWtlIiwiX2hhbmRsZUFkZENhcmRMaWtlIiwiX3RpdGxlIiwibmFtZSIsIl9saW5rIiwibGluayIsIl90ZW1wbGF0ZVNlbGVjdG9yIiwiX2hhbmRsZUltYWdlQ2xpY2siLCJfbGlrZXMiLCJsaWtlcyIsIl9pZCIsIl9oYW5kbGVEZWxldGVCaW5DbGljayIsIl9vd25lcklkIiwib3duZXIiLCJfaXNVc2VyQ2FyZCIsImdldENhcmRJZCIsIl9zZXRDYXJkTGlrZXMiLCJfY2FyZExpa2VDb3VudCIsInRleHRDb250ZW50IiwibGVuZ3RoIiwiX2xpa2VCdXR0b24iLCJjbGFzc0xpc3QiLCJhZGQiLCJfc2V0RGVsZXRlQnV0dG9uIiwiX2RlbGV0ZUJ1dHRvbiIsIl9lbGVtZW50IiwicXVlcnlTZWxlY3RvciIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmUiLCJfZ2V0Q2FyZFRlbXBsYXRlIiwiZG9jdW1lbnQiLCJjb250ZW50IiwiY2xvbmVOb2RlIiwiYWRkTGlrZSIsImNhcmQiLCJyZW1vdmVMaWtlIiwiX3NldEV2ZW50TGlzdGVuZXJzIiwiY2FyZEltYWdlIiwiX2hhbmRsZUxpa2VDbGljayIsInRpdGxlIiwiZ2VuZXJhdGVDYXJkIiwiY2FyZFRpdGxlIiwiYWx0Iiwic3JjIiwiRm9ybVZhbGlkYXRvciIsInNldHRpbmdzT2JqZWN0IiwiZm9ybUVsZW1lbnQiLCJfZm9ybVNlbGVjdG9yIiwiZm9ybVNlbGVjdG9yIiwiX2lucHV0U2VsZWN0b3IiLCJpbnB1dFNlbGVjdG9yIiwiX3N1Ym1pdEJ1dHRvblNlbGVjdG9yIiwic3VibWl0QnV0dG9uU2VsZWN0b3IiLCJfaW5hY3RpdmVCdXR0b25DbGFzcyIsImluYWN0aXZlQnV0dG9uQ2xhc3MiLCJfaW5wdXRFcnJvckNsYXNzIiwiaW5wdXRFcnJvckNsYXNzIiwiX2Vycm9yQ2xhc3MiLCJlcnJvckNsYXNzIiwiX2Zvcm1FbGVtZW50IiwiX2lucHV0TGlzdCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJfYnV0dG9uRWxlbWVudCIsIl9zaG93RXJyb3JJbnB1dCIsImlucHV0RWxlbWVudCIsImVycm9yTWVzc2FnZSIsImVycm9yRWxlbWVudCIsImlkIiwiX2hpZGVFcnJvcklucHV0IiwiX3RvZ2dsZUlucHV0RXJyb3IiLCJ2YWxpZGl0eSIsInZhbGlkIiwidmFsaWRhdGlvbk1lc3NhZ2UiLCJfaGFzSW52YWxpZElucHV0IiwiaW5wdXRMaXN0Iiwic29tZSIsIl90b2dnbGVCdXR0b25TdGF0ZSIsImRpc2FibGVkIiwiZm9yRWFjaCIsImVuYWJsZVZhbGlkYXRpb24iLCJldnQiLCJwcmV2ZW50RGVmYXVsdCIsInJlc2V0QnV0dG9uU3RhdGUiLCJjaGVja0lucHV0RXJyb3JzIiwiY29uZmlnT2JqIiwiYWRkQ2FyZEJ1dHRvbiIsImVkaXRQcm9maWxlQnV0dG9uIiwiZWRpdFByb2ZpbGVBdmF0YXJCdXR0b24iLCJmb3JtVmFsaWRhdG9ycyIsIlBvcHVwIiwicG9wdXBTZWxlY3RvciIsImtleSIsImNsb3NlIiwidGFyZ2V0IiwiY29udGFpbnMiLCJfcG9wdXAiLCJvcGVuIiwiX2hhbmRsZUVzY0Nsb3NlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInNldEV2ZW50TGlzdGVuZXJzIiwiX2Nsb3NlQnV0dG9uIiwiX2hhbmRsZU91dHNpZGVDbGljayIsIlBvcHVwV2l0aEZvcm0iLCJoYW5kbGVGb3JtU3VibWl0Iiwic3VwZXIiLCJfaGFuZGxlRm9ybVN1Ym1pdCIsIl9wb3B1cEZvcm0iLCJfc3VibWl0QnV0dG9uIiwiX3N1Ym1pdEJ1dHRvblRleHQiLCJfaW5wdXRWYWx1ZXMiLCJyZW5kZXJMb2FkaW5nIiwiaXNMb2FkaW5nIiwibG9hZGluZ1RleHQiLCJzZXRJbnB1dFZhbHVlcyIsImlucHV0IiwidmFsdWUiLCJfZ2V0SW5wdXRWYWx1ZXMiLCJyZXNldCIsImFwaSIsImJhc2VVcmwiLCJoZWFkZXJzIiwiX2Jhc2VVcmwiLCJfaGVhZGVycyIsImdldEluaXRpYWxDYXJkcyIsImZldGNoIiwidGhlbiIsInJlcyIsIm9rIiwianNvbiIsIlByb21pc2UiLCJyZWplY3QiLCJzdGF0dXMiLCJnZXRVc2VySW5mbyIsImVkaXRVc2VySW5mbyIsImRlc2NyaXB0aW9uIiwibWV0aG9kIiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJhYm91dCIsImFkZE5ld0NhcmQiLCJkZWxldGVDYXJkIiwiY2FyZElkIiwiYWRkQ2FyZExpa2UiLCJyZW1vdmVDYXJkTGlrZSIsInVwZGF0ZVByb2ZpbGVBdmF0YXIiLCJhdmF0YXIiLCJzaG93UHJvbWlzZVN0YXR1cyIsImFsbCIsImluaXRpYWxDYXJkcyIsImZldGNoZWRVc2VySW5mbyIsImF1dGhvcml6YXRpb24iLCJpbWFnZVByZXZpZXdQb3B1cCIsIl9pbWFnZUVsZW1lbnQiLCJfaW1hZ2VDYXB0aW9uIiwidXNlckluZm8iLCJuYW1lU2VsZWN0b3IiLCJqb2JTZWxlY3RvciIsImF2YXRhclNlbGVjdG9yIiwiX25hbWUiLCJfam9iIiwiX2F2YXRhciIsIl91c2VySWQiLCJzZXRVc2VySW5mbyIsImRlbGV0ZUNhcmRDb25maXJtUG9wdXAiLCJzZXRDYWxsYmFjayIsImNhdGNoIiwiZXJyIiwiY29uc29sZSIsImxvZyIsImNyZWF0ZUNhcmQiLCJlZGl0UHJvZmlsZVBvcHVwIiwiYnV0dG9uIiwiZmluYWxseSIsImFkZENhcmRQb3B1cCIsImNhcmRFbGVtZW50IiwiY2FyZEdhbGxlcnkiLCJwcmVwZW5kSXRlbSIsImhhbmRsZURlbGV0ZUNhcmRDb25maXJtU3VibWl0IiwiX2hhbmRsZURlbGV0ZUNhcmRDb25maXJtU3VibWl0IiwiX2NhcmRJZCIsImVkaXRQcm9maWxlQXZhdGFyUG9wdXAiLCJjb250YWluZXJTZWxlY3RvciIsInJlbmRlcmVyIiwiX3JlbmRlcmVyIiwiX2NvbnRhaW5lciIsInJlbmRlckl0ZW1zIiwiaXRlbXMiLCJfcmVuZGVyZWRJdGVtcyIsIml0ZW0iLCJlbGVtZW50IiwicHJlcGVuZCIsInNldEl0ZW0iLCJhcHBlbmQiLCJsaWtlIiwidmFsaWRhdG9yIiwiZm9ybU5hbWUiLCJnZXRBdHRyaWJ1dGUiXSwic291cmNlUm9vdCI6IiJ9