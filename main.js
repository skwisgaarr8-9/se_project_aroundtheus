!function(){"use strict";class e{constructor(e){let{data:t,templateSelector:r,handleImageClick:s,isUserCard:i,handleDeleteBinClick:n,isLiked:o,handleAddCardLike:a,handleRemoveCardLike:l}=e;var c,d,h;c=this,h=()=>{this._isLiked?(this._handleRemoveCardLike(this._id,this._cardLikeCount),this._likeButton.classList.remove("card__like-button-clicked"),this._isLiked=!this._isLiked):(this._handleAddCardLike(this._id,this._cardLikeCount),this._likeButton.classList.add("card__like-button-clicked"),this._isLiked=!this._isLiked)},(d=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var s=r.call(e,"string");if("object"!=typeof s)return s;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==typeof t?t:String(t)}(d="_handleLikeClick"))in c?Object.defineProperty(c,d,{value:h,enumerable:!0,configurable:!0,writable:!0}):c[d]=h,this._title=t.name,this._link=t.link,this._templateSelector=r,this._handleImageClick=s,this._likes=t.likes,this._id=t._id,this._handleDeleteBinClick=n,this._isLiked=o,this._ownerId=t.owner._id,this._isUserCard=i,this._handleAddCardLike=a,this._handleRemoveCardLike=l}_setCardLikes(){this._cardLikeCount.textContent=this._likes.length,this._isLiked&&this._likeButton.classList.add("card__like-button-clicked")}_setDeleteButton(){this._deleteButton=this._element.querySelector(".card__delete-button"),this._isUserCard?this._deleteButton.addEventListener("click",(()=>{this._handleDeleteBinClick(this._id,this._element)})):this._deleteButton.remove()}_getCardTemplate(){return document.querySelector(this._templateSelector).content.querySelector(".card").cloneNode(!0)}_setEventListeners(){this._likeButton=this._element.querySelector(".card__like-button");const e=this._element.querySelector(".card__image");this._likeButton.addEventListener("click",this._handleLikeClick),e.addEventListener("click",(()=>{this._handleImageClick({title:this._title,link:this._link})}))}generateCard(){this._element=this._getCardTemplate();const e=this._element.querySelector(".card__title"),t=this._element.querySelector(".card__image");return this._cardLikeCount=this._element.querySelector(".card__like-count"),t.alt=this._title,e.textContent=this._title,t.src=this._link,this._setEventListeners(),this._setDeleteButton(),this._setCardLikes(),this._element}}class t{constructor(e,t){this._formSelector=e.formSelector,this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._formElement=t,this._inputList=[...this._formElement.querySelectorAll(this._inputSelector)],this._buttonElement=this._formElement.querySelector(this._submitButtonSelector)}_showErrorInput(e,t){const r=this._formElement.querySelector(`.${e.id}-error`);e.classList.add(this._inputErrorClass),r.textContent=t,r.classList.add(this._errorClass)}_hideErrorInput(e){const t=this._formElement.querySelector(`.${e.id}-error`);e.classList.remove(this._inputErrorClass),t.classList.remove(this._errorClass),t.textContent=""}_toggleInputError(e){e.validity.valid?this._hideErrorInput(e):this._showErrorInput(e,e.validationMessage)}_hasInvalidInput(e){return e.some((e=>!e.validity.valid))}_toggleButtonState(){this._hasInvalidInput(this._inputList)?(this._buttonElement.disabled=!0,this._buttonElement.classList.add(this._inactiveButtonClass)):(this._buttonElement.disabled=!1,this._buttonElement.classList.remove(this._inactiveButtonClass))}_setEventListeners(){this._toggleButtonState(),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._toggleInputError(e),this._toggleButtonState()}))}))}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}resetButtonState(){this._toggleButtonState()}checkInputErrors(){this._inputList.forEach((e=>{this._toggleInputError(e)}))}}const r={formSelector:".modal__form",inputSelector:".form__input",submitButtonSelector:".form__button",inactiveButtonClass:"form__button_disabled",inputErrorClass:"form__input_type_error",errorClass:"form__error_visible"};class s{constructor(e,t){let{items:r,renderer:s}=e;this._renderedItems=r,this._renderer=s,this._container=document.querySelector(t)}renderItems(){this._renderedItems.forEach((e=>this._renderer(e)))}setItem(e){this._container.append(e)}}function i(e,t,r){return(t=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var s=r.call(e,"string");if("object"!=typeof s)return s;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==typeof t?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}class n{constructor(e){i(this,"_handleEscClose",(e=>{"Escape"===e.key&&this.close()})),i(this,"_handleOutsideClick",(e=>{e.target.classList.contains("modal")&&this.close()})),this._popup=document.querySelector(e)}open(){this._popup.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popup.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}setEventListeners(){this._closeButton=this._popup.querySelector(".modal__close-button"),this._closeButton.addEventListener("click",(()=>{this.close()})),this._popup.addEventListener("mousedown",this._handleOutsideClick)}}class o extends n{constructor(e,t){super(e),this._handleFormSubmit=t,this._popupForm=this._popup.querySelector(".modal__form"),this._submitButton=this._popup.querySelector(".form__button")}_getInputValues(){const e=this._popup.querySelectorAll(".form__input"),t={};return e.forEach((e=>{t[e.name]=e.value})),t}setEventListeners(){this._popup.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues(),this._submitButton)})),super.setEventListeners()}close(){super.close(),this._popupForm.reset()}}const a=new class{constructor(e){let{baseUrl:t,headers:r}=e;this._baseUrl=t,this._headers=r}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}editUserInfo(e){let{name:t,description:r}=e;return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:t,about:r})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}addNewCard(e){let{name:t,link:r}=e;return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:t,link:r})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}deleteCard(e){let{cardId:t}=e;return fetch(`${this._baseUrl}/cards/${t}`,{method:"DELETE",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}addCardLike(e){let{cardId:t}=e;return fetch(`${this._baseUrl}/cards/likes/${t}`,{method:"PUT",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}removeCardLike(e){let{cardId:t}=e;return fetch(`${this._baseUrl}/cards/likes/${t}`,{method:"DELETE",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}updateProfileAvatar(e){let{link:t}=e;return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:t})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}showPromiseStatus(){return Promise.all([this.getInitialCards(),this.getUserInfo()]).then((e=>({initialCards:e[0],fetchedUserInfo:e[1]})))}}({baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"02e654eb-5ace-4af7-a9f1-ec1c835dc4d8","Content-Type":"application/json"}}),l=document.querySelector(".form__input_content_name"),c=document.querySelector(".form__input_content_description"),d=".modal_content_add-place",h=".modal_content_edit-profile",u=".modal_content_edit-avatar",_=document.querySelector(h).querySelector(r.formSelector),m=document.querySelector(d).querySelector(r.formSelector),p=document.querySelector(u).querySelector(r.formSelector),v=new t(r,_),f=new t(r,m),k=new t(r,p),b=document.querySelector(".profile__add-button"),S=document.querySelector(".profile__edit-button"),C=document.querySelector(".profile__image-edit-button"),E=new class extends n{constructor(e){var t,r,s;super(e),t=this,s=e=>{const t=this._popup.querySelector(".modal__image"),r=this._popup.querySelector(".modal__caption");t.src=e.link,t.alt=e.title,r.textContent=e.title,super.open()},(r=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var s=r.call(e,"string");if("object"!=typeof s)return s;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==typeof t?t:String(t)}(r="open"))in t?Object.defineProperty(t,r,{value:s,enumerable:!0,configurable:!0,writable:!0}):t[r]=s}}(".modal_content_card-preview");E.setEventListeners();const L=new class{constructor(e){let{nameSelector:t,jobSelector:r,avatarSelector:s}=e;this._name=document.querySelector(t),this._job=document.querySelector(r),this._avatar=document.querySelector(s)}getUserInfo(){return{name:this._name.textContent,job:this._job.textContent,avatar:this._avatar.src}}setUserInfo(e){let{name:t,description:r,avatar:s}=e;this._name.textContent=t,this._job.textContent=r,this._avatar.src=s}}({nameSelector:".profile__name",jobSelector:".profile__title",avatarSelector:".profile__image"}),y=document.querySelector(".gallery__cards"),g=(e,t)=>{t.textContent=e?"Saving...":"Save"},I=(e,t)=>{$.setCallback((()=>{a.deleteCard({cardId:e}).then((()=>{t.remove(),$.close()})).catch((e=>{console.log(e)}))})),$.open()},q=e=>{E.open(e)},B=(e,t)=>{a.addCardLike({cardId:e}).then((e=>{t.textContent=e.likes.length})).catch((e=>{console.log(e)}))},w=(e,t)=>{a.removeCardLike({cardId:e}).then((e=>{t.textContent=e.likes.length})).catch((e=>{console.log(e)}))},j=t=>{let{data:r,isUserCard:s,isLiked:i}=t;return new e({data:r,templateSelector:"#card",handleImageClick:q,isUserCard:s,handleDeleteBinClick:I,isLiked:i,handleAddCardLike:B,handleRemoveCardLike:w}).generateCard()},U=new o(h,((e,t)=>{let{name:r,description:s}=e;g(!0,t),a.editUserInfo({name:r,description:s}).then((e=>{L.setUserInfo({name:e.name,description:e.about,avatar:e.avatar}),U.close()})).catch((e=>{console.log(e)})).finally((()=>{g(!1,t)}))}));U.setEventListeners(),S.addEventListener("click",(()=>{(()=>{const e=L.getUserInfo();l.value=e.name,c.value=e.job})(),v.checkInputErrors(),v.resetButtonState(),U.open()}));const P=new o(d,((e,t)=>{let{title:r,link:s}=e;g(!0,t),a.addNewCard({name:r,link:s}).then((e=>{const t=j({data:e,isUserCard:!0});y.prepend(t),P.close()})).catch((e=>{console.log(e)})).finally((()=>{g(!1,t)}))}));P.setEventListeners(),b.addEventListener("click",(()=>{f.resetButtonState(),P.open()}));const $=new class extends n{constructor(e){let{popupSelector:t}=e;super(t)}setCallback(e){this._handleDeleteCardConfirmSubmit=e}setEventListeners(){this._popup.addEventListener("submit",(e=>{e.preventDefault(),this._handleDeleteCardConfirmSubmit(this._cardId)})),super.setEventListeners()}}({popupSelector:".modal_content_card-delete-confirm"});$.setEventListeners();const x=new o(u,((e,t)=>{let{link:r}=e;g(!0,t),a.updateProfileAvatar({link:r}).then((e=>{L.setUserInfo({name:e.name,description:e.about,avatar:e.avatar}),x.close()})).catch((e=>{console.log(e)})).finally((()=>{g(!1,t)}))}));x.setEventListeners(),C.addEventListener("click",(()=>{k.resetButtonState(),x.open()})),f.enableValidation(),v.enableValidation(),k.enableValidation(),a.showPromiseStatus().then((e=>{let{initialCards:t,fetchedUserInfo:r}=e;L.setUserInfo({name:r.name,description:r.about,avatar:r.avatar});const i=new s({items:t,renderer:e=>{const t=j({data:e,isUserCard:r._id===e.owner._id,isLiked:e.likes.some((e=>e._id===r._id))});i.setItem(t)}},".gallery__cards");i.renderItems()})).catch((e=>{console.log(e)}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,